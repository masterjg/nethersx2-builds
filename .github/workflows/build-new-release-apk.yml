name: Build new release APK

on:
  schedule:
    - cron: "0 3 * * *"
  workflow_dispatch:

jobs:
  check-release:
    name: Check release
    runs-on: ubuntu-24.04
    steps:
      - name: Check out this repository
        uses: actions/checkout@v4

      - name: Get last known release
        id: get-last-known-release
        run: |
          LAST_KNOWN_RELEASE=""
          if [ -f .release_version ]; then
            LAST_KNOWN_RELEASE="$(cat .release_version)"
          fi
          echo "release=${LAST_KNOWN_RELEASE}" >> "$GITHUB_OUTPUT"

      - name: Get latest release from NetherSX2-patch repository
        id: get-latest-release
        run: |
          LATEST_RELEASE_JSON="$(curl -s https://api.github.com/repos/Trixarian/NetherSX2-patch/releases/latest)"
          LATEST_RELEASE="$(echo "$LATEST_RELEASE_JSON" | jq -r .tag_name)"
          echo "release=${LATEST_RELEASE}" >> "$GITHUB_OUTPUT"

      - name: test
        run: |
          echo ${{ steps.get-last-known-release.outputs.release }}
          echo ${{ steps.get-latest-release.outputs.release }}

      # - name: Compare with last known release
      #   run: |
      #     LAST_TAG=""
      #     if [ -f .release_version ]; then
      #       LAST_TAG="$(cat .release_version)"
      #     fi
      #     echo "Last known release tag: $LAST_TAG"
      #     echo "Latest release tag: $LATEST_TAG"
      #     if [ "$LAST_TAG" = "$LATEST_TAG" ]; then
      #       echo "is_new=0" >> "$GITHUB_OUTPUT"
      #     else
      #       echo "is_new=1" >> "$GITHUB_OUTPUT"
      #     fi

  # build-release:
  #   needs: check-release
  #   if: needs.check-release.outputs.is_new == '1'
  #   runs-on: ubuntu-24.04
  #   steps:
  #     - name: build
  #       run: |
  #         ls -la

  # update-release-file:
  #   runs-on: ubuntu-24.04
  #   permissions:
  #     contents: write
  #   steps:
  #     - name: Check out this repository
  #       uses: actions/checkout@v4

  #     - name: Update stored release version
  #       run: |
  #         git config user.name "GitHub Actions"
  #         git config user.email "actions@github.com"
  #         echo "$LATEST_TAG" > .release_version
  #         git add .release_version
  #         git commit -m "Update last release tag to $LATEST_TAG"
  #         git push