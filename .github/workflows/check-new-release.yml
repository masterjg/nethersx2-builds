name: Check for new NetherSX2-patch release

on:
  schedule:
    - cron: '30 5,17 * * *'
    - cron: '30 5 * * 1,3'
    - cron: '30 5 * * 2,4'

jobs:
  check-release:
    runs-on: ubuntu-24.04
    
    permissions:
      contents: write

    steps:
      - run: date

      # - name: Check out this repository
      #   uses: actions/checkout@v4
      #   with:
      #     persist-credentials: true
      # - name: test
      #   run: |
      #       echo $GITHUB_TOKEN

      # - name: Get latest release from NetherSX2-patch
      #   id: get_latest
      #   run: |
      #     # Fetch JSON of the latest release
      #     LATEST_JSON=$(curl -s https://api.github.com/repos/Trixarian/NetherSX2-patch/releases/latest)
          
      #     # Extract the latest release tag
      #     LATEST_TAG=$(echo "$LATEST_JSON" | jq -r .tag_name)

      #     # Save it to an environment variable for the next step
      #     echo "LATEST_TAG=$LATEST_TAG" >> "$GITHUB_ENV"

      # - name: Compare with last known release
      #   id: compare_releases
      #   run: |
      #     # Default to 'none' if no .release_version file yet
      #     LAST_TAG="none"
      #     if [ -f .release_version ]; then
      #       LAST_TAG=$(cat .release_version)
      #     fi

      #     echo "Last known release tag: $LAST_TAG"
      #     echo "Latest release tag: $LATEST_TAG"

      #     # Compare
      #     if [ "$LAST_TAG" = "$LATEST_TAG" ]; then
      #       echo "No new release. Exiting..."
      #       exit 0
      #     else
      #       echo "New release found: $LATEST_TAG"
      #     fi
      
      # - name: Process new release (placeholder)
      #   # Only runs if the previous step didn't exit (i.e. there's a new release)
      #   run: |
      #     echo "Do your processing steps here, e.g. build or download artifacts..."

      # - name: Update stored release version
      #   run: |
      #     # Update .release_version with the new tag
      #     echo "$LATEST_TAG" > .release_version
          
      #     git config user.name "GitHub Actions"
      #     git config user.email "actions@github.com"
          
      #     git add .release_version
      #     git commit -m "Update last release tag to $LATEST_TAG"
      #     git push
